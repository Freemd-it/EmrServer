{"version":3,"sources":["../../Controller/KakaoTalkMessageController.js"],"names":["express","require","bodyParser","async","util","alimTalkModel","router","Router","AlimTalkWaterfall","use","log","req","res","next","console","post","insertValue","body","waterfall","Send","callback","SendMessage","result","error","SendCheck","SendResultCheck","setTimeout","CALL_STATUS","CMID","ReSendCheck","reSendType","undefined","ReSendResultCheck","Response","json","code","data","end","module","exports"],"mappings":";;AAAA;;;;;;;AAOA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,aAAaD,QAAQ,aAAR,CAAjB;AACA,IAAIE,QAAQF,QAAQ,OAAR,CAAZ;AACA,IAAIG,OAAOH,QAAQ,MAAR,CAAX;;AAEA,IAAII,gBAAgBJ,QAAQ,2BAAR,CAApB;;AAEA,IAAIK,SAASN,QAAQO,MAAR,EAAb;;AAEA,IAAIC,oBAAoB,SAApBA,iBAAoB,GAAU,CAAE,CAApC;;AAEAF,OAAOG,GAAP,CAAW,SAASC,GAAT,CAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AACpCC,YAAQJ,GAAR,CAAY,0CAAZ;AACAG;AACH,CAHD;;AAKAP,OAAOS,IAAP,CAAY,WAAZ,EAAyB,UAASJ,GAAT,EAAcC,GAAd,EAAkB;;AAEvC,QAAII,cAAcL,IAAIM,IAAtB;;AAEAd,UAAMe,SAAN,CAAgB,CACdV,kBAAkBW,IAAlB,GAAyB,UAASC,QAAT,EAAkB;AACvCf,sBAAcgB,WAAd,CAA0BL,WAA1B,EAAuC,UAASM,MAAT,EAAiBC,KAAjB,EAAuB;;AAExD,gBAAGA,KAAH,EAAU,MAAMA,KAAN;AACVH,qBAAS,CAAT,EAAYE,MAAZ;AACL,SAJD;AAKH,KAPa,EAQdd,kBAAkBgB,SAAlB,GAA8B,UAASF,MAAT,EAAiBF,QAAjB,EAA0B;AACpDf,sBAAcoB,eAAd,CAA8BH,MAA9B,EAAsC,UAASA,MAAT,EAAiBC,KAAjB,EAAuB;;AAEvDG,uBAAW,YAAU;AACjB,oBAAGJ,OAAOK,WAAP,KAAuB,GAA1B,EAA8B;;AAE1B,2BAAOnB,kBAAkBgB,SAAlB,CAA4BF,OAAOM,IAAnC,EAAyCR,QAAzC,CAAP;AACH,iBAHD,MAII;;AAEAA,6BAAS,CAAT,EAAYE,MAAZ;AACH;AACJ,aATD,EASG,IATH;AAUJ,SAZF;AAaH,KAtBa,EAuBdd,kBAAkBqB,WAAlB,GAAgC,UAASP,MAAT,EAAiBF,QAAjB,EAA0B;;AAEtDN,gBAAQJ,GAAR,CAAY,2BAAZ;AACAI,gBAAQJ,GAAR,CAAYY,MAAZ;AACAR,gBAAQJ,GAAR,CAAY,uBAAZ;;AAEA,YAAGY,OAAOK,WAAP,KAAuB,MAAvB,IAAiCX,YAAYc,UAAZ,KAA2BC,SAA/D,EAAyE;;AAEnEL,uBAAW,YAAU;AACjBrB,8BAAc2B,iBAAd,CAAgCV,OAAOM,IAAvC,EAA6C,UAASN,MAAT,EAAiBC,KAAjB,EAAuB;;AAEhET,4BAAQJ,GAAR,CAAYY,MAAZ;;AAEA,wBAAGA,WAAWS,SAAd,EAAwB;;AAEpB,+BAAOvB,kBAAkBqB,WAAlB,CAA8BP,OAAOM,IAArC,EAA2CR,QAA3C,CAAP;AACH,qBAHD,MAII;AACAA,iCAAS,CAAT,EAAYE,MAAZ;AACH;AACJ,iBAXD;AAYH,aAbD,EAaG,IAbH;AAcL,SAhBD,MAiBI;AACAF,qBAAS,CAAT,EAAYE,MAAZ;AACH;AACJ,KAjDa,CAAhB,EAmDEd,kBAAkByB,QAAlB,GAA6B,UAASV,KAAT,EAAgBD,MAAhB,EAAwBF,QAAxB,EAAiC;;AAE1D,YAAGG,KAAH,EAAU,MAAMA,KAAN;;AAEVX,YAAIsB,IAAJ,CAAS;AACLC,kBAAO,MADF;AAELC,kBAAOd;AAFF,SAAT;AAIAV,YAAIyB,GAAJ;AACH,KA5DH;AA8DH,CAlED;;AAoEAC,OAAOC,OAAP,GAAiBjC,MAAjB","file":"KakaoTalkMessageController.js","sourcesContent":["/**\r\n\r\nasync waterfall을 통해 태스크 간 argument 전달을 수행하며\r\n메서드 체이닝을 수행\r\n(receive > insert > select1 (발송 확인) > select2(대체 발송이 되었을 경우 확인) > response)\r\n\r\n*/\r\nvar express = require('express');\r\nvar bodyParser = require('body-parser');\r\nvar async = require(\"async\");\r\nvar util = require('util');\r\n\r\nvar alimTalkModel = require('../Model/AlimTalkModel.js');\r\n\r\nvar router = express.Router();\r\n\r\nvar AlimTalkWaterfall = function(){};\r\n\r\nrouter.use(function log(req, res, next) {\r\n    console.log('## kakaoTalkMessageController started ##');\r\n    next();\r\n});\r\n\r\nrouter.post('/alimtalk', function(req, res){\r\n\r\n    var insertValue = req.body;\r\n\r\n    async.waterfall([\r\n      AlimTalkWaterfall.Send = function(callback){\r\n          alimTalkModel.SendMessage(insertValue, function(result, error){\r\n\r\n                if(error) throw error;\r\n                callback(0, result);\r\n          });\r\n      },\r\n      AlimTalkWaterfall.SendCheck = function(result, callback){\r\n          alimTalkModel.SendResultCheck(result, function(result, error){\r\n\r\n                setTimeout(function(){\r\n                    if(result.CALL_STATUS === \"9\"){\r\n\r\n                        return AlimTalkWaterfall.SendCheck(result.CMID, callback);\r\n                    }\r\n                    else{\r\n\r\n                        callback(0, result);\r\n                    }\r\n                }, 3000);\r\n           });\r\n      },\r\n      AlimTalkWaterfall.ReSendCheck = function(result, callback){\r\n\r\n          console.log(\"## ReSendCheck STARTED ##\");\r\n          console.log(result);\r\n          console.log(\"## ReSendCheck END ##\");\r\n\r\n          if(result.CALL_STATUS !== \"1000\" && insertValue.reSendType !== undefined){\r\n\r\n                setTimeout(function(){\r\n                    alimTalkModel.ReSendResultCheck(result.CMID, function(result, error){\r\n\r\n                        console.log(result);\r\n\r\n                        if(result === undefined){\r\n\r\n                            return AlimTalkWaterfall.ReSendCheck(result.CMID, callback);\r\n                        }\r\n                        else{\r\n                            callback(0, result);\r\n                        }\r\n                    });\r\n                }, 5000);\r\n          }\r\n          else{\r\n              callback(0, result);\r\n          }\r\n      }],\r\n\r\n      AlimTalkWaterfall.Response = function(error, result, callback){\r\n\r\n          if(error) throw error;\r\n\r\n          res.json({\r\n              code : \"0000\",\r\n              data : result\r\n          })\r\n          res.end();\r\n      }\r\n    );\r\n});\r\n\r\nmodule.exports = router;\r\n"]}