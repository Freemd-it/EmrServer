{"version":3,"sources":["../../Service/SessionService.js"],"names":["session","require","redisStore","config","util","SessionService","Init","sessionSetting","cookie","expires","Date","now","serverConfig","session_expire","maxAge","store","port","redisConfig","redisPort","host","redisHost","secret","session_secret","resave","saveUninitialized","app","set","secure","use","Check","token","module","exports"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,iBAAR,CAAd;AACA,IAAIC,aAAaD,QAAQ,eAAR,EAAyBD,OAAzB,CAAjB;AACA,IAAIG,SAASF,QAAQ,qBAAR,CAAb;AACA,IAAIG,OAAOH,QAAQ,MAAR,CAAX;;AAEA,IAAII,iBAAiB,SAAjBA,cAAiB,GAAY,CAAE,CAAnC;;AAEAA,eAAeC,IAAf,GAAsB,YAAU;;AAE5B,QAAIC,iBAAiB;AACjBC,gBAAQ,EAAEC,SAAS,IAAIC,IAAJ,CAASA,KAAKC,GAAL,KAAaR,OAAOS,YAAP,CAAoBC,cAA1C,CAAX,EAAsEC,QAAQX,OAAOS,YAAP,CAAoBC,cAAlG,EADS;AAEjBE,eAAO,IAAIb,UAAJ,CAAe;AACpBc,kBAAMb,OAAOc,WAAP,CAAmBC,SADL;AAEpBC,kBAAMhB,OAAOc,WAAP,CAAmBG;AAFL,SAAf,CAFU;AAMjBC,gBAAQlB,OAAOS,YAAP,CAAoBU,cANX;AAOjBC,gBAAQ,KAPS;AAQjBC,2BAAmB;AARF,KAArB;;AAWAC,QAAIC,GAAJ,CAAQ,aAAR,EAAuB,CAAvB;AACAnB,mBAAeC,MAAf,CAAsBmB,MAAtB,GAA+B,IAA/B;;AAEAF,QAAIG,GAAJ,CAAQ5B,QAAQO,cAAR,CAAR;AACH,CAjBD;;AAmBAF,eAAewB,KAAf,GAAuB,UAASC,KAAT,EAAe;;AAElC,QAAIA,QAAQA,KAAZ;AACH,CAHD;;AAKAC,OAAOC,OAAP,GAAiB3B,cAAjB","file":"SessionService.js","sourcesContent":["var session = require('express-session');\r\nvar redisStore = require('connect-redis')(session);\r\nvar config = require('../common/Config.js');\r\nvar util = require('util');\r\n\r\nvar SessionService = function () {};\r\n\r\nSessionService.Init = function(){\r\n\r\n    var sessionSetting = {\r\n        cookie: { expires: new Date(Date.now() + config.serverConfig.session_expire), maxAge: config.serverConfig.session_expire },\r\n        store: new redisStore({\r\n          port: config.redisConfig.redisPort,\r\n          host: config.redisConfig.redisHost\r\n        }),\r\n        secret: config.serverConfig.session_secret,\r\n        resave: false,\r\n        saveUninitialized: true\r\n    };\r\n\r\n    app.set('trust proxy', 1);\r\n    sessionSetting.cookie.secure = true;\r\n\r\n    app.use(session(sessionSetting));\r\n}\r\n\r\nSessionService.Check = function(token){\r\n\r\n    var token = token;\r\n}\r\n\r\nmodule.exports = SessionService;\r\n"]}